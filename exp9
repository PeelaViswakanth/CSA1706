import itertools
print ("192421349-Viswakanth")
def travelling_salesman(graph, start):
    # Get all vertices except the start
    vertices = list(graph.keys())
    vertices.remove(start)

    min_path = None
    min_cost = float('inf')

    # Generate all possible paths using permutations
    for perm in itertools.permutations(vertices):
        current_path = [start] + list(perm) + [start]  # complete round trip
        cost = 0

        # Calculate the cost of the current path
        for i in range(len(current_path) - 1):
            u, v = current_path[i], current_path[i+1]
            cost += graph[u][v]

        # Update minimum if this path is better
        if cost < min_cost:
            min_cost = cost
            min_path = current_path

    return min_path, min_cost

# Example usage
graph = {
    'A': {'A': 0, 'B': 10, 'C': 15, 'D': 20},
    'B': {'A': 10, 'B': 0, 'C': 35, 'D': 25},
    'C': {'A': 15, 'B': 35, 'C': 0, 'D': 30},
    'D': {'A': 20, 'B': 25, 'C': 30, 'D': 0}
}

start_node = 'A'
path, cost = travelling_salesman(graph, start_node)
print("Minimum cost path:", " -> ".join(path))
print("Total cost:", cost)
